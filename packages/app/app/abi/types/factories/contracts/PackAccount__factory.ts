/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PackAccount,
  PackAccountInterface,
} from "../../contracts/PackAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "operation",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isValidSigner",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611378806100206000396000f3fe6080604052600436106100745760003560e01c806374420f4c1161004e57806374420f4c146101375780638da5cb5b14610167578063c19d93fb14610192578063fc0c546a146101bd5761007b565b806301ffc9a7146100805780631626ba7e146100bd578063523e3260146100fa5761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061099f565b6101ea565b6040516100b491906109e7565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b7e565b610324565b6040516100f19190610be9565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c9190610cc2565b61035d565b60405161012e9190610be9565b60405180910390f35b610151600480360381019061014c9190610d58565b61038b565b60405161015e9190610e5f565b60405180910390f35b34801561017357600080fd5b5061017c6104b9565b6040516101899190610e90565b60405180910390f35b34801561019e57600080fd5b506101a7610563565b6040516101b49190610eba565b60405180910390f35b3480156101c957600080fd5b506101d2610569565b6040516101e193929190610ed5565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102b557507f6faff5f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061031d57507f74420f4c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000806103396103326104b9565b85856105e9565b9050801561035157631626ba7e60e01b915050610357565b60009150505b92915050565b600061036884610679565b1561037c5763523e326060e01b9050610384565b600060e01b90505b9392505050565b606061039633610679565b6103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc90610f8f565b60405180910390fd5b60008214610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90611021565b60405180910390fd5b600080815461042690611070565b9190508190555060008673ffffffffffffffffffffffffffffffffffffffff168686866040516104579291906110e8565b60006040518083038185875af1925050503d8060008114610494576040519150601f19603f3d011682016040523d82523d6000602084013e610499565b606091505b508093508192505050806104af57815160208301fd5b5095945050505050565b6000806000806104c7610569565b9250925092504683146104e05760009350505050610560565b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004016105199190610eba565b602060405180830381865afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a9190611116565b93505050505b90565b60005481565b600080600080606067ffffffffffffffff81111561058a57610589610a53565b5b6040519080825280601f01601f1916602001820160405280156105bc5781602001600182028036833780820191505090505b5090506060604d60208301303c808060200190518101906105dd9190611196565b93509350935050909192565b60008060006105f885856106bf565b509150915060006003811115610611576106106111e9565b5b816003811115610624576106236111e9565b5b14801561065c57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061066e575061066d86868661071b565b5b925050509392505050565b600080610684610569565b509150508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614915050919050565b600080600060418451036107045760008060006020870151925060408701519150606087015160001a90506106f68882858561083f565b955095509550505050610714565b60006002855160001b9250925092505b9250925092565b60008060008573ffffffffffffffffffffffffffffffffffffffff16858560405160240161074a929190611227565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161079c9190611288565b600060405180830381855afa9150503d80600081146107d7576040519150601f19603f3d011682016040523d82523d6000602084013e6107dc565b606091505b50915091508180156107f057506020815110155b80156108345750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061083291906112b4565b145b925050509392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561087f576000600385925092509250610929565b6000600188888888604051600081526020016040526040516108a494939291906112fd565b6020604051602081039080840390855afa1580156108c6573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361091a57600060016000801b93509350935050610929565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61097c81610947565b811461098757600080fd5b50565b60008135905061099981610973565b92915050565b6000602082840312156109b5576109b461093d565b5b60006109c38482850161098a565b91505092915050565b60008115159050919050565b6109e1816109cc565b82525050565b60006020820190506109fc60008301846109d8565b92915050565b6000819050919050565b610a1581610a02565b8114610a2057600080fd5b50565b600081359050610a3281610a0c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a8b82610a42565b810181811067ffffffffffffffff82111715610aaa57610aa9610a53565b5b80604052505050565b6000610abd610933565b9050610ac98282610a82565b919050565b600067ffffffffffffffff821115610ae957610ae8610a53565b5b610af282610a42565b9050602081019050919050565b82818337600083830152505050565b6000610b21610b1c84610ace565b610ab3565b905082815260208101848484011115610b3d57610b3c610a3d565b5b610b48848285610aff565b509392505050565b600082601f830112610b6557610b64610a38565b5b8135610b75848260208601610b0e565b91505092915050565b60008060408385031215610b9557610b9461093d565b5b6000610ba385828601610a23565b925050602083013567ffffffffffffffff811115610bc457610bc3610942565b5b610bd085828601610b50565b9150509250929050565b610be381610947565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c2f82610c04565b9050919050565b610c3f81610c24565b8114610c4a57600080fd5b50565b600081359050610c5c81610c36565b92915050565b600080fd5b600080fd5b60008083601f840112610c8257610c81610a38565b5b8235905067ffffffffffffffff811115610c9f57610c9e610c62565b5b602083019150836001820283011115610cbb57610cba610c67565b5b9250929050565b600080600060408486031215610cdb57610cda61093d565b5b6000610ce986828701610c4d565b935050602084013567ffffffffffffffff811115610d0a57610d09610942565b5b610d1686828701610c6c565b92509250509250925092565b6000819050919050565b610d3581610d22565b8114610d4057600080fd5b50565b600081359050610d5281610d2c565b92915050565b600080600080600060808688031215610d7457610d7361093d565b5b6000610d8288828901610c4d565b9550506020610d9388828901610d43565b945050604086013567ffffffffffffffff811115610db457610db3610942565b5b610dc088828901610c6c565b93509350506060610dd388828901610d43565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e1a578082015181840152602081019050610dff565b60008484015250505050565b6000610e3182610de0565b610e3b8185610deb565b9350610e4b818560208601610dfc565b610e5481610a42565b840191505092915050565b60006020820190508181036000830152610e798184610e26565b905092915050565b610e8a81610c24565b82525050565b6000602082019050610ea56000830184610e81565b92915050565b610eb481610d22565b82525050565b6000602082019050610ecf6000830184610eab565b92915050565b6000606082019050610eea6000830186610eab565b610ef76020830185610e81565b610f046040830184610eab565b949350505050565b600082825260208201905092915050565b7f5061636b4163636f756e743a204f6e6c79205061636b4d61696e2063616e206360008201527f616c6c0000000000000000000000000000000000000000000000000000000000602082015250565b6000610f79602383610f0c565b9150610f8482610f1d565b604082019050919050565b60006020820190508181036000830152610fa881610f6c565b9050919050565b7f5061636b4163636f756e743a204f6e6c792063616c6c206f7065726174696f6e60008201527f732061726520737570706f727465640000000000000000000000000000000000602082015250565b600061100b602f83610f0c565b915061101682610faf565b604082019050919050565b6000602082019050818103600083015261103a81610ffe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107b82610d22565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110ad576110ac611041565b5b600182019050919050565b600081905092915050565b60006110cf83856110b8565b93506110dc838584610aff565b82840190509392505050565b60006110f58284866110c3565b91508190509392505050565b60008151905061111081610c36565b92915050565b60006020828403121561112c5761112b61093d565b5b600061113a84828501611101565b91505092915050565b60008151905061115281610d2c565b92915050565b600061116382610c04565b9050919050565b61117381611158565b811461117e57600080fd5b50565b6000815190506111908161116a565b92915050565b6000806000606084860312156111af576111ae61093d565b5b60006111bd86828701611143565b93505060206111ce86828701611181565b92505060406111df86828701611143565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61122181610a02565b82525050565b600060408201905061123c6000830185611218565b818103602083015261124e8184610e26565b90509392505050565b600061126282610de0565b61126c81856110b8565b935061127c818560208601610dfc565b80840191505092915050565b60006112948284611257565b915081905092915050565b6000815190506112ae81610a0c565b92915050565b6000602082840312156112ca576112c961093d565b5b60006112d88482850161129f565b91505092915050565b600060ff82169050919050565b6112f7816112e1565b82525050565b60006080820190506113126000830187611218565b61131f60208301866112ee565b61132c6040830185611218565b6113396060830184611218565b9594505050505056fea26469706673582212201a63742e86eeb5a2e0d046e913705ff5453e6269341760c57bf5d71a1d916ab964736f6c63430008140033";

type PackAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PackAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PackAccount__factory extends ContractFactory {
  constructor(...args: PackAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PackAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PackAccount__factory {
    return super.connect(runner) as PackAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PackAccountInterface {
    return new Interface(_abi) as PackAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PackAccount {
    return new Contract(address, _abi, runner) as unknown as PackAccount;
  }
}
