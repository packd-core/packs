/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Lockable,
  LockableInterface,
} from "../../../../@doncesarts/tokenbound-contracts/abstract/Lockable";

const _abi = [
  {
    inputs: [],
    name: "ExceedsMaxLockTime",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
    ],
    name: "LockUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "isLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lockedUntil",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lockedUntil",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class Lockable__factory {
  static readonly abi = _abi;
  static createInterface(): LockableInterface {
    return new Interface(_abi) as LockableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lockable {
    return new Contract(address, _abi, runner) as unknown as Lockable;
  }
}
