/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Overridable,
  OverridableInterface,
} from "../../../../@doncesarts/tokenbound-contracts/abstract/Overridable";

const _abi = [
  {
    inputs: [],
    name: "InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "OverrideUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "overrides",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
      {
        internalType: "address[]",
        name: "implementations",
        type: "address[]",
      },
    ],
    name: "setOverrides",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Overridable__factory {
  static readonly abi = _abi;
  static createInterface(): OverridableInterface {
    return new Interface(_abi) as OverridableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Overridable {
    return new Contract(address, _abi, runner) as unknown as Overridable;
  }
}
