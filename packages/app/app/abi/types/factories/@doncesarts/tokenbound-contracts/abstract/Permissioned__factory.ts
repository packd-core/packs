/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Permissioned,
  PermissionedInterface,
} from "../../../../@doncesarts/tokenbound-contracts/abstract/Permissioned";

const _abi = [
  {
    inputs: [],
    name: "InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "hasPermission",
        type: "bool",
      },
    ],
    name: "PermissionUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permissions",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "callers",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "_permissions",
        type: "bool[]",
      },
    ],
    name: "setPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Permissioned__factory {
  static readonly abi = _abi;
  static createInterface(): PermissionedInterface {
    return new Interface(_abi) as PermissionedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Permissioned {
    return new Contract(address, _abi, runner) as unknown as Permissioned;
  }
}
