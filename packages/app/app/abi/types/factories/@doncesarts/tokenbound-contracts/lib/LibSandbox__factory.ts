/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LibSandbox,
  LibSandboxInterface,
} from "../../../../@doncesarts/tokenbound-contracts/lib/LibSandbox";

const _abi = [
  {
    inputs: [],
    name: "footer",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "header",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61016861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630d7163c6146100455780633ce3018514610097575b600080fd5b6100816040518060400160405280600e81526020017f604380600d600039806000f3fe7300000000000000000000000000000000000081525081565b60405161008e91906100b6565b60405180910390f35b6100816040518060600160405280602e8152602001610105602e913981565b600060208083528351808285015260005b818110156100e3578581018301518582016040015282016100c7565b506000604082860101526040601f19601f830116850101925050509291505056fe3314601d573d3dfd5b363d3d373d3d6014360360143d5160601c5af43d6000803e80603e573d6000fd5b3d6000f3a264697066735822122085659129dba81e8f79b774dbe780c11c839aa6607906334e8df2374da5aecc3864736f6c63430008140033";

type LibSandboxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibSandboxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibSandbox__factory extends ContractFactory {
  constructor(...args: LibSandboxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LibSandbox & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LibSandbox__factory {
    return super.connect(runner) as LibSandbox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibSandboxInterface {
    return new Interface(_abi) as LibSandboxInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LibSandbox {
    return new Contract(address, _abi, runner) as unknown as LibSandbox;
  }
}
